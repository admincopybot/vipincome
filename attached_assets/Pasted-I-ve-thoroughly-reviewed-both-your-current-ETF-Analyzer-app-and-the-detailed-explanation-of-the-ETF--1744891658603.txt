I've thoroughly reviewed both your current ETF Analyzer app and the detailed explanation of the ETF scoring system in your Income Machine application. Here's a comprehensive prompt with detailed code and implementation examples to help you integrate the working logic from our current app into your Income Machine application.

ETF Technical Scoring System Implementation Guide
Overview
This guide provides a robust implementation of the 5-factor ETF technical scoring system using yfinance, pandas, and technical analysis libraries. The code is designed to be accurate, reliable, and consistent with TradingView's calculations.

Core Components to Implement
1. Data Fetching Functions
These functions will reliably retrieve daily and hourly data for ETFs:

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
def fetch_daily_data(symbol, period='2y'):
    """
    Fetch daily price data for the given symbol.
    
    Args:
        symbol (str): The ETF symbol (e.g., 'XLP', 'SPY')
        period (str): The time period to fetch (default: '2y' for 2 years)
        
    Returns:
        pandas.DataFrame: DataFrame with OHLCV data at daily timeframe
    """
    try:
        # Get more data to ensure we have enough for weekly analysis
        df = yf.download(symbol, period=period, interval='1d')
        df.dropna(inplace=True)
        
        # Ensure datetime index
        df.index = pd.to_datetime(df.index)
        
        # Validate that we have enough data
        if len(df) < 100:  # Minimum required for 100-day EMA
            print(f"Warning: Insufficient data for {symbol}, only {len(df)} days available")
        
        return df
    except Exception as e:
        print(f"Error fetching daily data for {symbol}: {str(e)}")
        return pd.DataFrame()
def fetch_hourly_data(symbol, period='7d'):
    """
    Fetch hourly price data for the given symbol.
    
    Args:
        symbol (str): The ETF symbol (e.g., 'XLP', 'SPY')
        period (str): The time period to fetch (default: '7d' for 7 days)
        
    Returns:
        pandas.DataFrame: DataFrame with OHLCV data at hourly timeframe
    """
    try:
        df = yf.download(symbol, period=period, interval='1h')
        df.dropna(inplace=True)
        
        # Ensure datetime index
        df.index = pd.to_datetime(df.index)
        
        return df
    except Exception as e:
        print(f"Error fetching hourly data for {symbol}: {str(e)}")
        return pd.DataFrame()
2. Weekly Closing Price Function
This function reliably gets the previous Friday's closing price to match TradingView:

def get_latest_weekly_close(df):
    """
    Get the latest completed weekly close price.
    ALWAYS uses Friday's closing price for weekly candles to match TradingView.
    
    Args:
        df (pandas.DataFrame): DataFrame with price data
        
    Returns:
        float: The closing price from the most recent completed Friday
    """
    # Ensure we have a datetime index
    df.index = pd.to_datetime(df.index)
    
    # Get the day of the week for the latest data point (0=Monday, 4=Friday, 6=Sunday)
    current_day = df.index[-1].weekday()
    today_date = df.index[-1].date()
    
    # Create weekly candles where each candle ends on Friday (W-FRI)
    weekly_df = df['Close'].resample('W-FRI').last().dropna()
    
    # We need the most recent completed weekly candle
    if len(weekly_df) >= 2:
        # Get the date of the last weekly candle (should be a Friday)
        last_friday_date = weekly_df.index[-1].date()
        
        # If today is the same as the last weekly candle date (i.e., today is Friday)
        # then use the previous Friday's close
        if today_date == last_friday_date:
            weekly_close = float(weekly_df.iloc[-2] if hasattr(weekly_df.iloc[-2], 'iloc') else weekly_df.iloc[-2])
        else:
            weekly_close = float(weekly_df.iloc[-1] if hasattr(weekly_df.iloc[-1], 'iloc') else weekly_df.iloc[-1])
        
        return weekly_close
    else:
        # Fallback if not enough weekly data
        return float(df['Close'].iloc[0])
3. Technical Analysis Functions
These functions calculate the necessary technical indicators:

def calculate_ema(series, window):
    """
    Calculate the Exponential Moving Average for a price series.
    
    Args:
        series (pandas.Series): Price series (typically closing prices)
        window (int): EMA period (e.g., 20 for 20-day EMA)
        
    Returns:
        pandas.Series: The EMA values
    """
    return series.ewm(span=window, adjust=False).mean()
def calculate_rsi(df_hourly, window=14):
    """
    Calculate the Relative Strength Index.
    
    Args:
        df_hourly (pandas.DataFrame): DataFrame with hourly price data
        window (int): RSI period (default: 14)
        
    Returns:
        float: The current RSI value
    """
    delta = df_hourly['Close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=window).mean()
    avg_loss = loss.rolling(window=window).mean()
    
    # Handle division by zero
    avg_loss = avg_loss.replace(0, 0.00001)  
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    # Get the most recent valid RSI value
    current_rsi = rsi.dropna().iloc[-1]
    return float(current_rsi if not hasattr(current_rsi, 'iloc') else current_rsi.iloc[0])
def calculate_atr(df, window):
    """
    Calculate the Average True Range.
    
    Args:
        df (pandas.DataFrame): DataFrame with price data
        window (int): ATR period (e.g., 3 for 3-day ATR)
        
    Returns:
        float: The current ATR value
    """
    high_low = df['High'] - df['Low']
    high_close = abs(df['High'] - df['Close'].shift())
    low_close = abs(df['Low'] - df['Close'].shift())
    tr = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
    atr = tr.rolling(window=window).mean()
    
    # Get the most recent valid ATR value
    current_atr = atr.dropna().iloc[-1]
    return float(current_atr if not hasattr(current_atr, 'iloc') else current_atr.iloc[0])
4. Main Scoring Function
This function implements the 5-factor scoring system:

def score_etf(symbol):
    """
    Calculate the 5-factor technical score for an ETF.
    
    Args:
        symbol (str): The ETF symbol
        
    Returns:
        dict: A dictionary with score and detailed metrics
    """
    try:
        # Fetch data
        df_daily = fetch_daily_data(symbol)
        df_hourly = fetch_hourly_data(symbol)
        
        if df_daily.empty or df_hourly.empty:
            return {
                "Symbol": symbol,
                "Score": 0,
                "Error": "Insufficient data",
                "Price": 0,
                "RSI": 0
            }
        
        # Extract current price
        current_price = float(df_daily['Close'].iloc[-1] if not hasattr(df_daily['Close'].iloc[-1], 'iloc') 
                              else df_daily['Close'].iloc[-1].iloc[0])
        
        # Calculate technical indicators
        ema20 = calculate_ema(df_daily['Close'], 20).iloc[-1]
        ema20 = float(ema20 if not hasattr(ema20, 'iloc') else ema20.iloc[0])
        
        ema100 = calculate_ema(df_daily['Close'], 100).iloc[-1]
        ema100 = float(ema100 if not hasattr(ema100, 'iloc') else ema100.iloc[0])
        
        rsi_value = calculate_rsi(df_hourly)
        
        weekly_close = get_latest_weekly_close(df_daily)
        
        atr3 = calculate_atr(df_daily, 3)
        atr6 = calculate_atr(df_daily, 6)
        
        # Evaluate the 5 criteria
        criteria1 = current_price > ema20  # Price > 20 EMA
        criteria2 = current_price > ema100  # Price > 100 EMA
        criteria3 = rsi_value < 50  # RSI < 50
        criteria4 = current_price > weekly_close  # Price > Last Week Close
        criteria5 = atr3 < atr6  # 3-day ATR < 6-day ATR
        
        # Calculate total score
        total_score = sum([criteria1, criteria2, criteria3, criteria4, criteria5])
        
        # Prepare detailed results
        return {
            "Symbol": symbol,
            "Score": total_score,
            "Price > EMA20": bool(criteria1),
            "Price > EMA100": bool(criteria2),
            "RSI < 50": bool(criteria3),
            "Price > Last Week": bool(criteria4),
            "ATR3 < ATR6": bool(criteria5),
            "Price": current_price,
            "RSI": rsi_value,
            "EMA20": ema20,
            "EMA100": ema100,
            "Weekly Close": weekly_close,
            "ATR3": atr3,
            "ATR6": atr6
        }
        
    except Exception as e:
        print(f"Error scoring {symbol}: {str(e)}")
        return {
            "Symbol": symbol,
            "Score": 0,
            "Error": str(e),
            "Price": 0,
            "RSI": 0
        }
5. Batch Processing Function
This function handles analyzing multiple ETFs efficiently:

def analyze_etf_batch(symbols):
    """
    Analyze a batch of ETF symbols and calculate their scores.
    
    Args:
        symbols (list): List of ETF symbols to analyze
        
    Returns:
        pandas.DataFrame: DataFrame with scores and detailed metrics for each ETF
    """
    results = []
    
    for symbol in symbols:
        try:
            score_data = score_etf(symbol)
            results.append(score_data)
        except Exception as e:
            print(f"Error analyzing {symbol}: {str(e)}")
            results.append({
                "Symbol": symbol,
                "Score": 0,
                "Error": str(e),
                "Price": 0,
                "RSI": 0
            })
    
    # Convert to DataFrame and sort by score (descending)
    if results:
        return pd.DataFrame(results).sort_values(by="Score", ascending=False)
    else:
        return pd.DataFrame()
Implementation for Your Income Machine App
Option 1: Standalone Service
Create a new scoring service class that implements the logic above:

class EnhancedEtfScoringService:
    def __init__(self, cache_duration=3600):  # Default 1-hour cache
        """
        Initialize the ETF scoring service with caching.
        
        Args:
            cache_duration (int): Cache duration in seconds
        """
        self.cache = {}  # Symbol -> (score_data, timestamp)
        self.cache_duration = cache_duration
    
    def get_etf_score(self, symbol, force_refresh=False):
        """
        Get the ETF score, using cached value if available and recent.
        
        Args:
            symbol (str): The ETF symbol
            force_refresh (bool): Whether to force a data refresh
            
        Returns:
            dict: Score data for the ETF
        """
        now = datetime.now()
        
        # Check if we have a cached value that's still valid
        if (not force_refresh and symbol in self.cache and 
            (now - self.cache[symbol][1]).total_seconds() < self.cache_duration):
            return self.cache[symbol][0]
        
        # Calculate new score
        score_data = score_etf(symbol)
        
        # Update cache
        self.cache[symbol] = (score_data, now)
        
        return score_data
    
    def analyze_etfs(self, symbols, force_refresh=False):
        """
        Analyze multiple ETFs and return their scores.
        
        Args:
            symbols (list): List of ETF symbols
            force_refresh (bool): Whether to force a data refresh
            
        Returns:
            pandas.DataFrame: DataFrame with scores and metrics
        """
        results = []
        
        for symbol in symbols:
            score_data = self.get_etf_score(symbol, force_refresh)
            results.append(score_data)
        
        if results:
            return pd.DataFrame(results).sort_values(by="Score", ascending=False)
        else:
            return pd.DataFrame()
    
    def clear_cache(self):
        """Clear the entire cache."""
        self.cache = {}
Option 2: Integration with Existing SimplifiedMarketDataService
Replace the _calculate_etf_score method in your SimplifiedMarketDataService with:

def _calculate_etf_score(self, symbol, force_refresh=False):
    """
    Calculate the ETF score using reliable yfinance implementation.
    
    Args:
        symbol (str): ETF symbol
        force_refresh (bool): Whether to force a fresh calculation
        
    Returns:
        tuple: (score, current_price, detailed_score_info)
    """
    try:
        # Try to use cached value first
        cache_key = f"etf_score_{symbol}"
        if not force_refresh and self.cache.get(cache_key):
            cached_data = self.cache.get(cache_key)
            return cached_data
            
        # Fetch data
        df_daily = fetch_daily_data(symbol)
        df_hourly = fetch_hourly_data(symbol)
        
        if df_daily.empty or df_hourly.empty:
            raise ValueError(f"Insufficient data for {symbol}")
        
        # Extract current price
        current_price = float(df_daily['Close'].iloc[-1] if not hasattr(df_daily['Close'].iloc[-1], 'iloc') 
                             else df_daily['Close'].iloc[-1].iloc[0])
        
        # Calculate technical indicators
        ema20 = calculate_ema(df_daily['Close'], 20).iloc[-1]
        ema20 = float(ema20 if not hasattr(ema20, 'iloc') else ema20.iloc[0])
        
        ema100 = calculate_ema(df_daily['Close'], 100).iloc[-1]
        ema100 = float(ema100 if not hasattr(ema100, 'iloc') else ema100.iloc[0])
        
        rsi_value = calculate_rsi(df_hourly)
        
        weekly_close = get_latest_weekly_close(df_daily)
        
        atr3 = calculate_atr(df_daily, 3)
        atr6 = calculate_atr(df_daily, 6)
        
        # Evaluate the 5 criteria
        criteria1 = current_price > ema20  # Price > 20 EMA
        criteria2 = current_price > ema100  # Price > 100 EMA
        criteria3 = rsi_value < 50  # RSI < 50
        criteria4 = current_price > weekly_close  # Price > Last Week Close
        criteria5 = atr3 < atr6  # 3-day ATR < 6-day ATR
        
        # Calculate total score
        total_score = sum([criteria1, criteria2, criteria3, criteria4, criteria5])
        
        # Prepare detailed results
        detailed_info = {
            "Price > EMA20": bool(criteria1),
            "Price > EMA100": bool(criteria2),
            "RSI < 50": bool(criteria3),
            "Price > Last Week": bool(criteria4),
            "ATR3 < ATR6": bool(criteria5),
            "EMA20": ema20,
            "EMA100": ema100,
            "Weekly Close": weekly_close,
            "ATR3": atr3,
            "ATR6": atr6,
            "RSI": rsi_value
        }
        
        # Cache the results
        self.cache[cache_key] = (total_score, current_price, detailed_info)
        
        return total_score, current_price, detailed_info
        
    except Exception as e:
        self.logger.error(f"Error calculating ETF score for {symbol}: {str(e)}")
        # Return default values in case of error
        return 0, 0, {"Error": str(e)}
Key Implementation Notes
Weekly Close Calculation: The most important fix is how we calculate the weekly close. We must always use the last Friday's closing price to match TradingView's calculations.

Data Type Handling: The code carefully handles conversion between Series and scalar types, preventing the "The truth value of a Series is ambiguous" errors.

Error Handling: Each function includes proper error handling to prevent crashes when data is unavailable.

Caching: The implementation includes efficient caching to reduce API calls while keeping data fresh.

Data Quality: We fetch 2 years of daily data to ensure sufficient history for all indicators.

Troubleshooting Tips
If you encounter issues with the integration:

Debug the weekly closing price: This is the most common source of discrepancies. Ensure you're using the correct Friday's close.

Check data freshness: Yahoo Finance data may have a slight delay. Using time-based cache invalidation helps.

Handle Series vs. scalar values: The code carefully converts pandas Series to float values where needed.

ATR calculation: Ensure you're using all components of the True Range (high-low, high-close previous, low-close previous).

RSI timeframe: Confirm you're calculating RSI on the hourly timeframe as specified.

This implementation should provide significantly more accurate and reliable ETF scoring for your Income Machine application.