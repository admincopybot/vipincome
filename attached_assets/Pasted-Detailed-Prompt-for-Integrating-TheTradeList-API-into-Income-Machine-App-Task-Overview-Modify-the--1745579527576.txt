Detailed Prompt for Integrating TheTradeList API into Income Machine App
Task Overview
Modify the Income Machine application to replace yfinance with TheTradeList API for real-time ETF pricing data while maintaining compatibility with the existing application structure.

Detailed Implementation Steps
1. Environment Setup & API Key Management
First, we need to set up environment variables for the new API key:
1. Add a new environment variable in the .env file called "TRADELIST_API_KEY" to store the API key securely.
2. Update the PolygonApiClient class to read this environment variable using os.environ.get().
3. Create a helper method to check if the API key is available and valid.
2. API Client Modifications
A. Add TheTradeList API Integration
1. Open api_client.py file where the PolygonApiClient class is defined.
2. Add the following constants at the top of the class:
   - TRADELIST_API_BASE_URL = "https://api.thetradelist.com/v1/data"
   - TRADELIST_SCANNER_ENDPOINT = "/get_trader_scanner_data.php"
   - TRADELIST_SUPPORTED_ETFS = ["XLC", "XLF", "XLV", "XLI", "XLP", "XLY", "XLE"]
3. Create a new method called get_tradelist_data() with the following parameters:
   - ticker (the ETF symbol to query)
   - return_type="json" (format to receive data)
4. Implement the method to:
   - Construct the API URL with proper parameters
   - Make an HTTP request with proper error handling
   - Parse and return the response
B. Modify the get_current_price() Method
1. Locate the existing get_current_price() method that currently uses yfinance.
2. Modify it to try TheTradeList API first:
   
   def get_current_price(self, ticker):
       """Get the current price and change data for a ticker using TheTradeList API with yfinance fallback"""
       try:
           # First attempt to get data from TheTradeList API
           if ticker in self.TRADELIST_SUPPORTED_ETFS:
               tradelist_data = self.get_tradelist_data(ticker)
               
               # Extract data from the response
               if tradelist_data and len(tradelist_data) > 0:
                   etf_data = tradelist_data[0]
                   current_price = float(etf_data.get("current_stock_price", 0))
                   prev_close = float(etf_data.get("prev_week_stock_close_price", 0))
                   
                   # Calculate change values
                   price_change = current_price - prev_close
                   percent_change = (price_change / prev_close * 100) if prev_close > 0 else 0
                   
                   # Create response object matching the current structure
                   return {
                       "ticker": ticker,
                       "price": current_price,
                       "change": price_change,
                       "change_percent": percent_change,
                       "volume": etf_data.get("stock_volume_by_day", 0),
                       "last_updated": etf_data.get("price_update_time", ""),
                       "data_source": "TheTradeList API"
                   }
               
           # Fall back to yfinance if TheTradeList API fails or ticker not supported
           logging.info(f"Falling back to yfinance for {ticker}")
           return self._get_price_from_yfinance(ticker)
       except Exception as e:
           logging.error(f"Error getting price data for {ticker}: {str(e)}")
           # Fall back to yfinance in case of any error
           return self._get_price_from_yfinance(ticker)
C. Create a Fallback Method for yfinance
1. Extract the current yfinance implementation into a separate method named _get_price_from_yfinance():
def _get_price_from_yfinance(self, ticker):
    """Extract original yfinance implementation as fallback"""
    try:
        # [Copy the entire current implementation of get_current_price()]
    except Exception as e:
        logging.error(f"YFinance error for {ticker}: {str(e)}")
        return {
            "ticker": ticker,
            "price": 0,
            "change": 0,
            "change_percent": 0,
            "volume": 0,
            "last_updated": "",
            "data_source": "Error"
        }
3. Response Handling & Error Management
1. Add robust error handling and logging specifically for the TheTradeList API:
def get_tradelist_data(self, ticker, return_type="json"):
    """Get data from TheTradeList API"""
    try:
        # Ensure API key is available
        api_key = os.environ.get("TRADELIST_API_KEY")
        if not api_key:
            logging.error("TheTradeList API key not found in environment variables")
            return None
            
        # Construct API URL
        url = f"{self.TRADELIST_API_BASE_URL}{self.TRADELIST_SCANNER_ENDPOINT}"
        
        # Build query parameters
        params = {
            "returntype": return_type,
            "apiKey": api_key
        }
        
        # Make API request
        response = requests.get(url, params=params, timeout=10)
        
        # Check for successful response
        if response.status_code == 200:
            if return_type.lower() == "json":
                data = response.json()
                # Filter to only get the requested ticker
                ticker_data = [item for item in data if item.get("symbol") == ticker]
                return ticker_data
            else:
                # Handle CSV response if needed
                return response.text
        else:
            logging.error(f"TheTradeList API error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        logging.error(f"Exception when calling TheTradeList API: {str(e)}")
        return None
4. Frontend Updates
1. Modify the frontend to indicate the data source (optional):
   - In templates/index.html, add a small indicator showing whether the price is from TheTradeList API or yfinance
   - This can help during testing and transition
2. In static/js/app.js, update the displayResults function to handle the new data_source field:
function displayResults(data) {
    // Existing code...
    
    // Add a data source indicator (optional)
    if (etfData.data_source) {
        const dataSourceIndicator = document.createElement('small');
        dataSourceIndicator.className = 'text-muted ms-2';
        dataSourceIndicator.textContent = etfData.data_source;
        // Append to the appropriate element
    }
}
5. Testing and Verification
1. Create a new route specifically for testing the TheTradeList API integration:
@app.route('/test_tradelist_api')
def test_tradelist_api():
    """Test endpoint to verify TheTradeList API integration"""
    api_client = PolygonApiClient()
    results = {}
    
    for ticker in api_client.TRADELIST_SUPPORTED_ETFS:
        # Get data from TheTradeList API
        tradelist_data = api_client.get_tradelist_data(ticker)
        
        # Also get data from yfinance for comparison
        yfinance_data = api_client._get_price_from_yfinance(ticker)
        
        results[ticker] = {
            'tradelist': tradelist_data,
            'yfinance': yfinance_data
        }
    
    return render_template('api_test.html', results=results)
6. Feature Flag for Gradual Rollout
1. Add a feature flag to easily toggle between APIs:
USE_TRADELIST_API = os.environ.get("USE_TRADELIST_API", "true").lower() == "true"
2. Modify get_current_price to check this flag:
def get_current_price(self, ticker):
    if self.USE_TRADELIST_API and ticker in self.TRADELIST_SUPPORTED_ETFS:
        # Try TheTradeList API first
        # ...implementation as above
    else:
        # Always use yfinance for non-supported tickers or when flag is off
        return self._get_price_from_yfinance(ticker)
Important Implementation Notes
Data Structure Compatibility: Ensure the data structure returned from both APIs is identical to maintain compatibility with the rest of the application.

Proper Error Handling: Always include robust error handling and logging to diagnose any issues during the transition.

Graceful Degradation: Implement the system to fall back to yfinance if TheTradeList API fails for any reason.

Performance Considerations:

Add caching to prevent excessive API calls
Monitor API response times to ensure performance is maintained
Testing Steps:

Test with valid API key
Test with invalid API key to verify fallback
Test with each ETF ticker individually
Compare data accuracy between the two sources
Verify refresh rates meet your requirements
Environmental Variables:

Add TRADELIST_API_KEY to your .env file
Add USE_TRADELIST_API=true as a feature flag
This implementation provides a robust way to integrate TheTradeList API while maintaining backward compatibility and ensuring reliability through proper fallback mechanisms.